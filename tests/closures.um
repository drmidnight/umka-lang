import "../import/fnc.um"

type Person = struct {
	name: str
	age: int
	sex: str
}

type Closure = struct {
	data: any
}

fn (c: ^Closure) call(person: Person): bool {
	printf("running by_name_eq with name : " + repr(c.data) + 
		" and person : " + repr(person) + '\n')
	return person.name == str(c.data)
}

fn by_name_eq(n: str): Closure {
	printf("running by_name_eq with name : " + n + '\n')
	return Closure{n}
}

fn test*() {
	named_foo := by_name_eq("Foo")

	persons := []Person{
		Person{"Foo", 24, "M"},
		Person{"Bar", 23, "M"},
		Person{"FooBar", 23, "F"}}

	mapped := []bool(fnc.Array(persons).map_(fn (person, closure: any): any {
			return Closure(closure).call(Person(person))
		}, named_foo))

	printf(repr(mapped) + '\n')
}

fn main() {
	test()
}
