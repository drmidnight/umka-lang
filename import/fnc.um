// Umka functional programming tools

type Array* = []any

fn (a: ^Array) map_*(f: fn (x, ctx: any): any, ctx: any): Array {
    res := make(Array, len(a^))
    for i := 0; i < len(a^); i++ {
        res[i] = f(a[i], ctx)
    }
    return res
}

fn (a: ^Array) filter*(f: fn (x, ctx: any): bool, ctx: any): Array {
    res := make(Array, 0)
    for i := 0; i < len(a^); i++ {
        if f(a[i], ctx) {
            res = append(res, a[i])
        }
    }
    return res
}

fn (a: ^Array) reduce*(f: fn (x, y, ctx: any): any, ctx: any): any {
    res := a[0]
    for i := 1; i < len(a^); i++ {
        res = f(res, a[i], ctx)
    }
    return res
}
